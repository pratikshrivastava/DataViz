library(boot)
## include leaps library for performing regression
## for best subset method
library(leaps)
### Set the seed
set.seed(1)
## genearte the predictors(20) with 1K observations
X=matrix(rnorm(1000*30),ncol=20,nrow=1000)
## create coefficients and set some of them to 0
bi <-rnorm(20)
bi[seq(2,18,by=4)] <-0
names(bi)
## genrate the variance
eps <- rnorm(1000)
## MOdel
Y <- X %*% bi + eps
### generate training (100 sample) and test 900 sample set.
train=sample(1:nrow(X),100)
test <- (-train)
X.train <- X[train, ]
X.test <- X[test, ]
Y.train <- Y[train]
Y.test <- Y[test]
## perform the best subset selection method
data.train <- data.frame(Y = Y.train, X= X.train)
regfit.full <- regsubsets(Y~.,data.train)
summary (regfit.full)
## Fit a 20 variable model
##Perform best subset selection on the training set,
## and plot the training set MSE associated with the best model of each size.
regfit.full <- regsubsets(Y~.,data.train, nvmax = 20)
summary(regfit.full)
#names(summary(regfit.full))
train.mat <- model.matrix(Y~., data = data.train, nvmax = 20)
## set a dummy matrix mse
mse <- rep(NA, 20)
for (i in 1:20) {
## get the coefficient for the models
coefi <- coef(regfit.full, id = i)
## get the prediction values from each of the model
pred <- train.mat[, names(coefi)] %*% coefi
mse[i] <- mean((pred - Y.train)^2)
}
plot(mse, xlab = "Number of predictors", ylab = "Training MSE", pch = 19, type = "b")
## Fit a 20 variable model
##Perform best subset selection on the test set,
## and plot the test set MSE associated with the best model of each size.
data.test <- data.frame(Y = Y.test, X= X.test)
#regfit.full.test <- regsubsets(Y~.,data.test, nvmax = 20)
#summary(regfit.full.test)
#names(summary(regfit.full))
test.mat <- model.matrix(Y~., data = data.test, nvmax = 20)
## set a dummy matrix mse
mse.test <- rep(NA, 20)
for (i in 1:20) {
## get the coefficient for the models
coefi.test <- coef(regfit.full, id = i)
## get the prediction values from each of the model on the test data
pred.test <- test.mat[, names(coefi.test)] %*% coefi.test
mse.test[i] <- mean((pred.test - Y.test)^2)
}
plot(mse.test, xlab = "Number of predictors", ylab = "Test MSE", pch = 19, type = "b")
which.min(coefi.test)
which.min(mse.test)
coef(regfit.full, which.min(val.errors))
coef(regfit.full, which.min(mse.test))
bi[seq(2,18,by=4)] <-0
seq(2,18,by=4
)
bi-coef(regfit.full, which.min(mse.test))
mse.coeff <- rep(NA, 20)
x_cols = colnames(X, do.NULL = FALSE, prefix = "X.")
for (i in 1:20) {
coefi.model <- coef(regfit.full, id = i)
mse.coeff[i] <- sqrt(sum((b[x_cols %in% names(coefi)] - coefi[names(coefi) %in% x_cols])^2) + sum(b[!(x_cols %in% names(coefi))])^2)
}
plot(mse.coeff, xlab = "Number of coefficients", ylab = "Error between estimated and true coefficients", pch = 19, type = "b")
mse.coeff <- rep(NA, 20)
x_cols = colnames(X, do.NULL = FALSE, prefix = "X.")
for (i in 1:20) {
coefi.model <- coef(regfit.full, id = i)
mse.coeff[i] <- sqrt(sum((b[x_cols %in% names(coefi)] - coefi[names(coefi) %in% x_cols])^2) + sum(b[!(x_cols %in% names(coefi))])^2)
}
mse.coeff <- rep(NA, 20)
x_cols = colnames(X, do.NULL = FALSE, prefix = "X.")
for (i in 1:20) {
coefi.model <- coef(regfit.full, id = i)
mse.coeff[i] <- sqrt(sum((bi[x_cols %in% names(coefi)] - coefi[names(coefi) %in% x_cols])^2) + sum(bi[!(x_cols %in% names(coefi))])^2)
}
plot(mse.coeff, xlab = "Number of coefficients", ylab = "Error between estimated and true coefficients", pch = 19, type = "b")
mse.coeff <- rep(NA, 20)
x_cols = colnames(X, do.NULL = FALSE, prefix = "X.")
for (i in 1:20) {
coefi.model <- coef(regfit.full, id = i)
mse.coeff[i] <- sqrt(sum((bi[x_cols %in% names(coefi)] - coefi.model[names(coefi) %in% x_cols])^2) + sum(bi[!(x_cols %in% names(coefi))])^2)
}
plot(mse.coeff, xlab = "Number of coefficients", ylab = "Error between estimated and true coefficients", pch = 19, type = "b")
plot(mse.coeff, xlab = "Number of coefficients", ylab = "Error between estimated and true coefficients", pch = 19, type = "b")
mse.coeff <- rep(NA, 20)
x_cols = colnames(X, do.NULL = FALSE, prefix = "X.")
for (i in 1:20) {
coefi.model <- coef(regfit.full, id = i)
mse.coeff[i] <- sqrt(sum((bi[x_cols %in% names(coefi.model)] - coefi.model[names(coefi.model) %in% x_cols])^2) + sum(bi[!(x_cols %in% names(coefi.model))])^2)
}
plot(mse.coeff, xlab = "Number of coefficients", ylab = "Error between estimated and true coefficients", pch = 19, type = "b")
library(paleocar)
library(magrittr) # The magrittr package enables piping in R.
library(raster)
library(magrittr)
library(tibble)
library(readr)
library(paleocar)
library(magrittr) # The magrittr package enables piping in R.
library(raster)
library(magrittr)
library(tibble)
library(readr)
install.packages("devtools")
devtools::install_github("bocinsky/paleocar")
library(paleocar)
update.packages("survival")
install.packages("devtools")
devtools::install_github("bocinsky/paleocar", force=TRUE)
install.packages("devtools")
library(paleocar)
library(magrittr) # The magrittr package enables piping in R.
library(raster)
library(magrittr)
library(tibble)
library(readr)
# Load spatial polygon for the boundary of Mesa Verde National Park (mvnp) in southwestern Colorado:
data(mvnp)
# Get Tree-ring data from the ITRDB for 10-degree buffer around mvnp
data(itrdb)
#fix(itrdb)
class(itrdb)
# Get 1/3 arc-second PRISM gridded data for the mvnp north study area (water-year [October--September] precipitation, in millimeters)
data(mvnp_prism)
mvnp_prism.vector <- mvnp_prism[1][1,]
test.vector <- paleocar_models(predictands = mvnp_prism.vector,
chronologies = itrdb,
calibration.years = 1920:19,
prediction.years = 1:2000,
verbose = T)
# Get 1/3 arc-second PRISM gridded data for the mvnp north study area (water-year [October--September] precipitation, in millimeters)
data(mvnp_prism)
# Extract a vector of annualized climate data (the first cell in the raster)
mvnp_prism.vector <- mvnp_prism[1][1,]
test.vector <- paleocar_models(predictands = mvnp_prism.vector,
chronologies = itrdb,
calibration.years = 1923:1984,
prediction.years = 1:2000,
verbose = T)
test.vector <- paleocar_models(predictands = mvnp_prism.vector,
chronologies = itrdb,
calibration.years = 1924:1983,
prediction.years = 1:2000,
verbose = T)
# Generate models and perform the reconstruction and error predictions.
mvnp_recon <- paleocar(predictands = mvnp_prism.vector,
label = "mvnp_prism",
chronologies = itrdb,
calibration.years = 1924:1983,
prediction.years = 1:2000,
out.dir = "./",
meanVar = "none",
floor = 0,
ceiling = NULL,
force.redo = T,
verbose = T)
#jpeg('rplot.jpg')
mvnp_recon$predictions %>%
raster::mean() %>%
raster::plot()
#dev.off ();
mvnp_recon$uncertainty %>%
raster::mean() %>%
raster::plot()
#jpeg('rplot.jpg')
mvnp_recon$predictions %>%
raster::mean() %>%
raster::plot()
#dev.off ();
# Extract a matrix of annualized climate data (all cells in the raster)
mvnp_prism.matrix <- mvnp_prism %>%
raster::as.matrix() %>%
t()
# Print to show format
mvnp_prism.matrix %>%
tibble::as_tibble()
test.matrix <- paleocar_models(predictands = mvnp_prism.matrix,
chronologies = itrdb,
calibration.years = 1924:1983,
prediction.years = 1:1985,
verbose = T)
# Generate predictions and uncertainty (and plot location means in uncertainty)
test_out_matrix<-predict_paleocar_models(models = test.matrix,
meanVar = "chained",
prediction.years = 600:1300) %>%
rowMeans() %>%
plot(x = as.numeric(names(.)),
y = .,
type = "l",
main="Predicted PPT Values - Prediction Years", xlab="Prediction Years", ylab="Prediction PPT Values"
)
# Plot the mean predictions and uncertainty
test.raster.predictions %>%
raster::mean() %>%
raster::plot(main="Predicted PPT Values - Prediction Years",
xlab="Prediction Years", ylab="Prediction PPT Values")
test.vector <- paleocar_models(predictands = mvnp_prism,
chronologies = itrdb,
calibration.years = 1924:1983,
prediction.years = 1:2000,
verbose = T)
test.raster <- paleocar_models(
predictands = mvnp_prism,
chronologies = itrdb,
calibration.years = 1924:1983,
prediction.years = 1:2000,
verbose = T
)
# Generate predictions and errors
test.raster.predictions <- predict_paleocar_models(models = test.raster,
meanVar = "chained",
prediction.years = 600:1300)
# Plot the mean predictions and uncertainty
test.raster.predictions %>%
raster::mean() %>%
raster::plot(main="Predicted PPT Values - Prediction Years",
xlab="Prediction Years", ylab="Prediction PPT Values")
edges <- c(1,2, 3,2, 2,4)
plot(graph(edges, n=max(edges), directed=TRUE))
plot(graph.extended.chordal.ring(n=100,w=10))
plot(graph.extended.chordal.ring(n=10,w=2))
library(igraph)
plot(graph.extended.chordal.ring(n=10,w=2))
>mvnp_prism
mvnp_prism
class(mvnp_prism)
setwd('D:\Study\UIUC\MSIM\COURSES\FAll2017\IS590-DataViz\script\DataViz\')
setwd('D:\\Study\\UIUC\\MSIM\\COURSES\\FAll2017\\IS590-DataViz\\script\\DataViz\\')
drye=read.table('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = TRUE)
drye=read.table('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = FALSE)
drye=read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = FALSE)
drye=read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = FALSE)
View(drye)
edges=read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = TRUE)
nodes=read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Nodes.csv' , header = TRUE)
dis_edges=read.csv('datafiles\\r_data_nw_92917\\pokemon_edges.csv' , header = TRUE)
dis_nodes=read.csv('datafiles\\r_data_nw_92917\\pokemon_nodes.csv' , header = TRUE)
View(nodes)
View(edges)
View(dis_edges)
View(dis_nodes)
dis_nodes
setwd("D:/Study/UIUC/MSIM/COURSES/FAll2017/IS590-DataViz/script/DataViz")
setwd("~/")
setwd("D:/Study/UIUC/MSIM/COURSES/FAll2017/IS590-DataViz/script/DataViz")
library(igraph)
library(igraph)
nodes <- read.csv('datafiles\\r_data_nw-92917\\DisneyRidesYear_Edges.csv', header=T, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw-92917\\DisneyRidesYear_nodes.csv', header=T, as.is = T)
setwd('D:\\Study\\UIUC\\MSIM\\COURSES\\FAll2017\\IS590-DataViz\\script\\DataViz\\')
nodes <- read.csv('datafiles\\r_data_nw-92917\\DisneyRidesYear_nodes.csv', header=T, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw-92917\\DisneyRidesYear_Edges.csv', header=T, as.is = T)
nodes <- read.csv('\\datafiles\\r_data_nw-92917\\DisneyRidesYear_Edges.csv', header=T, as.is = T)
dis_edges <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = TRUE)
nodes <- read.csv('\\datafiles\\r_data_nw-92917\\DisneyRidesYear_Edges.csv', header=TRUE, as.is = T)
edges <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = TRUE)
nodes <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Nodes.csv' , header = TRUE)
nodes <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Nodes.csv' , header = TRUE, as.is = T)
edges <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = TRUE, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Nodes.csv' , header = TRUE, as.is = T)
dis_edges <- read.csv('datafiles\\r_data_nw_92917\\pokemon_edges.csv' , header = TRUE)
dis_nodes <- read.csv('datafiles\\r_data_nw_92917\\pokemon_nodes.csv' , header = TRUE)
View(dis_edges)
library (mass)
library(igraph)
# set woking dir
setwd('D:\\Study\\UIUC\\MSIM\\COURSES\\FAll2017\\IS590-DataViz\\script\\DataViz\\')
#load the data from the csv files
d_edges <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = TRUE, as.is = T)
d_nodes <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Nodes.csv' , header = TRUE, as.is = T)
p_edges <- read.csv('datafiles\\r_data_nw_92917\\pokemon_edges.csv' , header = TRUE)
p_nodes <- read.csv('datafiles\\r_data_nw_92917\\pokemon_nodes.csv' , header = TRUE)
view(d_nodes)
view(d_nodes)
view(d_nodes)
view(d_nodes)
?view
??view
View
View(d_nodes)
class(d_nodes)
disnet <- graph_from_data_frame(d=d_edges, vertices = d_nodes, directed = F)
class(disnet)
disnet <- simplify(disnet, remove.loops = T)
plot(disnet)
disnet
V(disnet)$label <- NA
V(disnet)$label <- NA
plot(disnet)
V(disnet)$label = paste(nodes$id, nodes$typelabel, sep=', ')
V(disnet)$label = paste(d_nodes$id, d_nodes$typelabel, sep=', ')
plot(disnet)
V(distnet)$label.cex <-0.7
V(disnet)$label.cex <-0.7
plot(disnet)
V(disnet)$label.color < 'green'
plot(disnet)
plot(disnet)
V(disnet)$size <- 10
plot(disnet)
V(disnet)$label.color < 'green'
plot(disnet)
V(disnet)$label.color <-'green'
plot(disnet)
V(disnet)$size <- 10
plot(disnet)
unique(d_nodes$id.type)
unique(d_nodes$id.type)
colrs <- sample(rainbow(16))
V(disnet)$color <- colrs[V(disnet)$id.type]
plot(disnet)
## remove the labels from the edges, for visualization.
V(disnet)$label <- NA
plot(disnet)
plot(disnet, edge.color="black", edge.curved=0, layout=layout.circle)
plot(disnet, edge.color="black", edge.curved=0, layout=layout.graphopt())
plot(disnet, edge.color="black", edge.curved=0, layout=layout.graphopt())
plot(disnet, edge.color="black", edge.curved=0, layout=layout.gem)
plot(disnet, edge.color="black", edge.curved=0, layout=layout.circle)
plot(disnet, edge.color="black", edge.curved=0, layout=layout.circle,
main="Rides in Magic Kingdom")
## pasting it back.
V(disnet)$label = paste(d_nodes$id, d_nodes$typelabel, sep=', ')
plot(disnet)
plot(disnet, edge.color="black", edge.curved=0, layout=layout.circle,
main="Rides in Magic Kingdom")
V(disnet)$label.color <-'grey'
V(disnet)$label.color <-'grey'
plot(disnet)
plot(disnet, edge.color="black", edge.curved=0, layout=layout.circle,
main="Rides in Magic Kingdom")
plot(disnet, edge.color="black", edge.curved=0, layout=layout.grid,
main="Rides in Magic Kingdom")
plot(disnet, edge.color="black", edge.curved=0, layout=layout.circle,
main="Rides in Magic Kingdom")
library (mass)
library(igraph)
# set woking dir
setwd('D:\\Study\\UIUC\\MSIM\\COURSES\\FAll2017\\IS590-DataViz\\script\\DataViz\\')
#load the data from the csv files
edges <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = TRUE, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Nodes.csv' , header = TRUE, as.is = T)
library (mass)
library(igraph)
# set woking dir
setwd('D:\\Study\\UIUC\\MSIM\\COURSES\\FAll2017\\IS590-DataViz\\script\\DataViz\\')
#load the data from the csv files
edges <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Edges.csv' , header = TRUE, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw_92917\\DisneyRidesYear_Nodes.csv' , header = TRUE, as.is = T)
install.packages("visNetwork")
library("visNetwork")
edges <- read.csv('datafiles\\r_data_nw_92917\\pokemon_edges.csv' , header = TRUE, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw_92917\\pokemon_nodes.csv' , header = TRUE, as.is = T)
library("visNetwork")
# set woking dir
setwd('D:\\Study\\UIUC\\MSIM\\COURSES\\FAll2017\\IS590-DataViz\\script\\DataViz\\')
#load the data from the csv files
edges <- read.csv('datafiles\\r_data_nw_92917\\pokemon_edges.csv' , header = TRUE, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw_92917\\pokemon_nodes.csv' , header = TRUE, as.is = T)
view(nodes)
V
View(nodes)
View(edges)
class(nodes)
unique(nodes$id.type)
colrs <- c("blacck","green","red","blue","grey","burlywood","purple","yellow"
,"brown","pink","gold","plum")
colrs <- sample(rainbow(16))
colrs
colrs <- c("blacck","green","red","blue","grey","burlywood","purple","yellow"
,"brown","pink","gold","plum")
library (mass)
library(igraph)
install.packages("visNetwork")
library("visNetwork")
# set woking dir
setwd('D:\\Study\\UIUC\\MSIM\\COURSES\\FAll2017\\IS590-DataViz\\script\\DataViz\\')
#load the data from the csv files
edges <- read.csv('datafiles\\r_data_nw_92917\\pokemon_edges.csv' , header = TRUE, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw_92917\\pokemon_nodes.csv' , header = TRUE, as.is = T)
View(edges)
## different # of ids.
unique(nodes$id.type)
colrs <- c("blacck","green","red","blue","grey","burlywood","purple","yellow"
,"brown","pink","gold","plum")
nodes$color <- colrs[nodes$id.type]
## makegroups to assign the color
grps <- c("Pokemon","Grass","Fire","Water","Bug", "Normal","Poison","Electric","Ground","Fairy",
"Flying","Dragon")
nodes$group <- grps[nodes$id.type]
nodes$borderwidth <- 2
nodes$shadow <- TRUE
nodes$label <- NA
nodes <- data.frame(nodes, title=paste0("<p><b>", nodes$id,"</b></p>"))
edges$color <- "black"
edges$color.highlight <-"green"
install.packages("visNetwork")
library (mass)
library(igraph)
#install.packages("visNetwork")
library("visNetwork")
# set woking dir
setwd('D:\\Study\\UIUC\\MSIM\\COURSES\\FAll2017\\IS590-DataViz\\script\\DataViz\\')
#load the data from the csv files
edges <- read.csv('datafiles\\r_data_nw_92917\\pokemon_edges.csv' , header = TRUE, as.is = T)
nodes <- read.csv('datafiles\\r_data_nw_92917\\pokemon_nodes.csv' , header = TRUE, as.is = T)
View(edges)
## different # of ids.
unique(nodes$id.type)
colrs <- c("blacck","green","red","blue","grey","burlywood","purple","yellow"
,"brown","pink","gold","plum")
nodes$color <- colrs[nodes$id.type]
## makegroups to assign the color
grps <- c("Pokemon","Grass","Fire","Water","Bug", "Normal","Poison","Electric","Ground","Fairy",
"Flying","Dragon")
nodes$group <- grps[nodes$id.type]
nodes$borderwidth <- 2
nodes$shadow <- TRUE
nodes$label <- NA
nodes <- data.frame(nodes, title=paste0("<p><b>", nodes$id,"</b></p>"))
edges$color <- "black"
edges$color.highlight <-"green"
pokenet <- visNetwork(nodes,edges,main="Pokemon Types Network")
pokenet <- visNetwork(nodes,edges,main="Pokemon Types Network",
submain="By Pratik") %>%
visOptions(selectedBy= "group",highlightNearest =TRUE) %>%
visGroups(groupname="Pokemon",color="black") %>%
visGroups(groupname="Grass",color="black")%>%
visGroups(groupname="Fire",color="black") %>%
visGroups(groupname="Water",color="black") %>%
visGroups(groupname="Bug",color="black") %>%
visGroups(groupname="Normal",color="black") %>%
visGroups(groupname="Poison",color="black") %>%
visGroups(groupname="Electric",color="black") %>%
visGroups(groupname="Fairy",color="black") %>%
visGroups(groupname="Flying",color="black") %>%
visGroups(groupname="Dragon",color="black") %>%
visPhysics(solver="forceAtlas2Based",forceAtlas2Based=list(gravitationalConstant=100))
pokenet
pokenet <- visNetwork(nodes,edges,main="Pokemon Types Network",
submain="By Pratik") %>%
visOptions(selectedBy= "group",highlightNearest =TRUE) %>%
visGroups(groupname="Pokemon",color="black") %>%
visGroups(groupname="Grass",color="black")%>%
visGroups(groupname="Fire",color="black") %>%
visGroups(groupname="Water",color="black") %>%
visGroups(groupname="Bug",color="black") %>%
visGroups(groupname="Normal",color="black") %>%
visGroups(groupname="Poison",color="black") %>%
visGroups(groupname="Electric",color="black") %>%
visGroups(groupname="Fairy",color="black") %>%
visGroups(groupname="Flying",color="black") %>%
visGroups(groupname="Dragon",color="black") %>%
visPhysics(solver="forceAtlas2Based",forceAtlas2Based=list(gravitationalConstant= -100))
pokenet
pokenet <- visNetwork(nodes,edges,main="Pokemon Types Network",
submain="By Pratik") %>%
visOptions(selectedBy= "group",highlightNearest =TRUE) %>%
visGroups(groupname="Pokemon",color="black") %>%
visGroups(groupname="Grass",color="black")%>%
visGroups(groupname="Fire",color="black") %>%
visGroups(groupname="Water",color="black") %>%
visGroups(groupname="Bug",color="black") %>%
visGroups(groupname="Normal",color="black") %>%
visGroups(groupname="Poison",color="black") %>%
visGroups(groupname="Electric",color="black") %>%
visGroups(groupname="Fairy",color="black") %>%
visGroups(groupname="Flying",color="black") %>%
visGroups(groupname="Dragon",color="black") %>%
visPhysics(solver="forceAtlas2Based",forceAtlas2Based=list(gravitationalConstant= -10))
pokenet
pokenet
pokenet <- visNetwork(nodes,edges,main="Pokemon Types Network",
submain="By Pratik") %>%
visOptions(selectedBy= "group",highlightNearest =TRUE) %>%
visGroups(groupname="Pokemon",color="black") %>%
visGroups(groupname="Grass",color="black")%>%
visGroups(groupname="Fire",color="black") %>%
visGroups(groupname="Water",color="black") %>%
visGroups(groupname="Bug",color="black") %>%
visGroups(groupname="Normal",color="black") %>%
visGroups(groupname="Poison",color="black") %>%
visGroups(groupname="Electric",color="black") %>%
visGroups(groupname="Fairy",color="black") %>%
visGroups(groupname="Flying",color="black") %>%
visGroups(groupname="Dragon",color="black") %>%
visPhysics(solver="forceAtlas2Based",forceAtlas2Based=list(gravitationalConstant= -500))
pokenet
nodes$borderwidth <- 4
pokenet
nodes
edges
unique(edges$to)
grps <- unique(edges$to)
grps
grps <- c("Pokemon","Grass","Fire","Water","Bug", "Normal","Poison","Electric","Ground","Fairy",
"Flying","Dragon")
grps
